# What is the difference between Statically typed and Dynamically typed?

Ans:(1).Statically type:Statically typed programming languages do type checking at compile-time.
                          Example:C,C++,Java,Rust,Scala etc..,
        
     (2).Dynamically type:Dynamically typed programming language do type checking at run-time.
                          Example:Ruby,Python,Javascript etc..,
                          
                          
# What Scripting-Language vs Programming Language?

  <>Programming-Language:(1):A programming language is a computer language that is used to communicate with computers using a set of instructions.
                        (2):It is compiled language or compiler-based language.
                        (3):It is used to develop an application or software.
                        (4):It runs or executes independently and does not depend on parent program.
                        (5):It uses a complier to convert source code into machine code.
                        (6):Examples:C,C++,Java etc..,
                        
                        
  <>Scripting-Language:(1):A scripting language is a type of programming language designed for a runtime system to automate the execution of tasks.
                       (2):It is interpreted language or interpreter-based language
                       (3):It is used to combine existing components and automate a specific task.
                       (4):It runs or executes inside another program.
                       (5):It uses an interpreter to convert source code into machine code.
                       (6):Examples:Ruby,Python,Javascript et..,
                       
                       
                       
# What is a Paradigm?

  <>Paradigm:A Paradigm is a style or "way" of programming.
             Some common Paradigm:=>Imperative: Programming with an explicit sequence of commands that update state.
                                  =>Declarative: Programming by specifying the result you want, not how to get it.
                                  =>Structured: Programming with clean, goto-free, nested control structures.
                                  =>Procedural: Imperative programming with procedure calls.
                                  =>Functional (Applicative): Programming with function calls that avoid any global state.
                                  =>Function-Level (Combinator): Programming with no variables at all.
                                  =>Object-Oriented: Programming by defining objects that send messages to each other. Objects have their own internal (encapsulated) state and public interfaces. Object orientation can be:
                                  =>Class-based: Objects get state and behavior based on membership in a class.
                                  =>Prototype-based: Objects get behavior from a prototype object.
                                  =>Event-Driven: Programming with emitters and listeners of asynchronous actions.
                                  =>Flow-Driven: Programming processes communicating with each other over predefined channels.
                                  =>Logic (Rule-based): Programming by specifying a set of facts and rules. An engine infers the answers to questions.
                                  =>Constraint: Programming by specifying a set of constraints. An engine finds the values that meet the constraints.
                                  =>Aspect-Oriented: Programming cross-cutting concerns applied transparently.
                                  =>Reflective: Programming by manipulating the program elements themselves.
                                  =>Array: Programming with powerful array operators that usually make loops unnecessary.             
                       
                      
                      
